// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  email       String       @unique
  firstName   String
  lastName    String
  password    String
  questions   Question[]
  collections Collection[]
  tags        Tag[]
  tests       Test[]
}

model Question {
  id           String           @id @default(cuid())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  content      String
  answer       String
  otherOptions String[]
  collections  Collection[]
  tests        Test[]
  results      ResultQuestion[]
}

model Collection {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  title       String
  description String
  isPrivate   Boolean    @default(false)
  canImport   Boolean    @default(true)
  canClone    Boolean    @default(true)
  questions   Question[]
  tags        Tag[]
}

model Tag {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  title       String
  description String
  isPrivate   Boolean      @default(false)
  canImport   Boolean      @default(true)
  canClone    Boolean      @default(true)
  collections Collection[]
}

model Test {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  title       String
  description String
  questions   Question[]
  results     Result[]
}

model Result {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now())
  test      Test             @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId    String
  score     Float
  questions ResultQuestion[]
}

model ResultQuestion {
  createdAt  DateTime @default(now())
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  result     Result   @relation(fields: [resultId], references: [id])
  resultId   String
  answer     String
  isCorrect  Boolean

  @@id([questionId, resultId])
}
