// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String       @id @default(cuid())
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  email               String       @unique
  firstName           String
  lastName            String
  password            String
  questions           Question[]   @relation(name: "QuestionOwner")
  authoredQuestions   Question[]   @relation(name: "QuestionOriginalCreator")
  collections         Collection[] @relation(name: "CollectionOwner")
  authoredCollections Collection[] @relation(name: "CollectionOriginalCreator")
  tags                Tag[]        @relation(name: "TagOwner")
  authoredTags        Tag[]        @relation(name: "TagOriginalCreator")
  tests               Test[]
}

model Question {
  id           String       @id @default(cuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(name: "QuestionOwner", fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  creator      User?        @relation(name: "QuestionOriginalCreator", fields: [creatorId], references: [id], onDelete: SetNull)
  creatorId    String?
  content      String
  answer       String
  otherOptions String[]
  collections  Collection[]
  tests        Test[]
  answers      Answer[]
}

model Collection {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(name: "CollectionOwner", fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  creator     User?      @relation(name: "CollectionOriginalCreator", fields: [creatorId], references: [id], onDelete: SetNull)
  creatorId   String?
  title       String
  description String
  isPrivate   Boolean    @default(false)
  canImport   Boolean    @default(true)
  canClone    Boolean    @default(true)
  questions   Question[]
  tags        Tag[]
}

model Tag {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(name: "TagOwner", fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  creator     User?        @relation(name: "TagOriginalCreator", fields: [creatorId], references: [id], onDelete: SetNull)
  creatorId   String?
  title       String
  description String
  isPrivate   Boolean      @default(false)
  canImport   Boolean      @default(true)
  canClone    Boolean      @default(true)
  collections Collection[]
}

model Test {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  title       String
  description String
  questions   Question[]
  results     Result[]
}

model Result {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  test      Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId    String
  score     Float
  answers   Answer[]
}

model Answer {
  createdAt  DateTime @default(now())
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  result     Result   @relation(fields: [resultId], references: [id])
  resultId   String
  answer     String
  isCorrect  Boolean

  @@id([questionId, resultId])
}
